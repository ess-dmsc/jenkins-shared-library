// Assuming you added the library to Jenkins with the name ecdc-pipeline, load
// it and import the required classes from the ecdcpipeline package.
@Library('ecdc-pipeline')
import ecdcpipeline.ContainerBuildNode
import ecdcpipeline.PipelineBuilder
import ecdcpipeline.NodeStatus

// Build a map of container build nodes where the pipeline will be run.
// ContainerBuildNode.getDefaultContainerBuildNode will return a default build
// node from the map in the DefaultContainerBuildNodeImages class. You can also
// create build node objects using a custom image and shell by using the
// ContainerBuildNode constructor. By using a default build node, your Jenkins
// job will automatically update to new versions of the build node image when
// this library is updated; use the custom image if you want to keep the version
// fixed or if the image you require is not provided by the library.
containerBuildNodes = [
  'centos-debug': ContainerBuildNode.getDefaultContainerBuildNode('centos7'),
  'centos-release': ContainerBuildNode.getDefaultContainerBuildNode('centos7'),
  'ubuntu': new ContainerBuildNode('essdmscdm/ubuntu18.04-build-node:1.1.0', 'bash -e')
]

// Instantiate a PipelineBuilder object to generate the builders, mounting the
// host directory /home/jenkins/data in the container with the mount point
// /var/data, and activate email failure notifications (Slack notifications are
// also available).
pipelineBuilder = new PipelineBuilder(this, containerBuildNodes, "/home/jenkins/data:/var/data")
pipelineBuilder.activateEmailFailureNotifications()

// PipelineBuilder defines properties that can be accessed in the Jenkinsfile.
echo pipelineBuilder.project
echo pipelineBuilder.branch
echo pipelineBuilder.buildNumber
echo pipelineBuilder.baseContainerName

// Create builders for each build node with a parameterised pipeline. Notice the
// 'container' parameter after the opening curly brace; this parameter can have
// any name ('container' is recommended for readability) and is used in the
// pipeline to invoke commands in the container.
builders = pipelineBuilder.createBuilders { container ->

  // The pipelineBuilder stage will send a failure notification in case an
  // exception is thrown. The notification message includes the stage name, so
  // adding the container name using 'container.key' to it allows identifying in
  // which container the exception occurred.
  pipelineBuilder.stage("${container.key}: First Stage") {
    // Clone the source code repository to a directory with the project's name
    // on the Jenkins build node. Notice that 'dir' only changes directories in
    // the build node, not in the container (where shell scripts are called from
    // /home/jenkins).
    dir(pipelineBuilder.project) {
      checkout scm
    }
    // Copy cloned source code to a directory named 'code' on the container. If
    // a relative path is passed to the container copy functions, it will be
    // prefixed with '/home/jenkins/'.
    container.copyTo(pipelineBuilder.project, 'code')
    // Regular pipeline commands can be used here.
    echo 'In first stage'
    // A shell script run on the Jenkins build node (not in a container).
    sh 'hostname'
    // A shell script run on the container.
    container.sh 'pwd; ls -la; ls -la code'
  }

  // The 'key' field can be used for conditional stages.
  if (container.key == 'centos-release') {
    pipelineBuilder.stage("${container.key}: Release Stage") {
      echo 'This stage is only run on centos-release'
      container.sh 'ls -la'
    }
  }

  pipelineBuilder.stage("${container.key}: Another Stage") {
    // Triple quotes can be used to write a multiline script.
    container.sh """
      cd code
      pwd
      ls -la
      cd ..
      mkdir build
      cd build
      echo TEST > test.txt
      ls
    """
    // Copy a file from the container.
    container.copyFrom('build/test.txt', '.')
    sh """
      ls -la
      cat test.txt
    """
  }

}

// Checkout code on coordinator node and start builders in parallel.
node {
  checkout scm
  try {
    // Only run macOS pipeline if a node is online.
    if (NodeStatus.isMacOSOnline()) {
      builders['macOS'] = getMacOSPipeline()
    }

    parallel builders
    } catch (e) {
      pipelineBuilder.handleFailureMessages()
      throw e
  }
}

// Define macOS pipeline in a function returning a closure with the node block.
def getMacOSPipeline() {
  return {
    node('macos') {

      pipelineBuilder.stage("macOS: First Stage") {
        dir(pipelineBuilder.project) {
          checkout scm
        }

        sh "ls -l"
      }

    }
  }
}
